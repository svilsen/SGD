// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// gd
Rcpp::List gd(const arma::mat& X, const arma::colvec& y, const arma::colvec& theta_initial, const double& alpha, const double& tolerance, const std::size_t& max_iterations, const std::size_t& trace_limit, const bool& trace);
RcppExport SEXP _SGD_gd(SEXP XSEXP, SEXP ySEXP, SEXP theta_initialSEXP, SEXP alphaSEXP, SEXP toleranceSEXP, SEXP max_iterationsSEXP, SEXP trace_limitSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type theta_initial(theta_initialSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< const std::size_t& >::type max_iterations(max_iterationsSEXP);
    Rcpp::traits::input_parameter< const std::size_t& >::type trace_limit(trace_limitSEXP);
    Rcpp::traits::input_parameter< const bool& >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(gd(X, y, theta_initial, alpha, tolerance, max_iterations, trace_limit, trace));
    return rcpp_result_gen;
END_RCPP
}
// sgd
Rcpp::List sgd(const arma::mat& X, const arma::colvec& y, const arma::colvec& theta_initial, const double& alpha, const double& gamma, const std::size_t& sgd_iterations, const std::size_t& trace_limit, const bool& trace);
RcppExport SEXP _SGD_sgd(SEXP XSEXP, SEXP ySEXP, SEXP theta_initialSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP sgd_iterationsSEXP, SEXP trace_limitSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type theta_initial(theta_initialSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const std::size_t& >::type sgd_iterations(sgd_iterationsSEXP);
    Rcpp::traits::input_parameter< const std::size_t& >::type trace_limit(trace_limitSEXP);
    Rcpp::traits::input_parameter< const bool& >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(sgd(X, y, theta_initial, alpha, gamma, sgd_iterations, trace_limit, trace));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SGD_gd", (DL_FUNC) &_SGD_gd, 8},
    {"_SGD_sgd", (DL_FUNC) &_SGD_sgd, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_SGD(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
